import { Box, Container } from "@mui/material";
import { motion, useViewportScroll } from "framer-motion";

export default function Home() {
  // interface UseScrollTriggerOptions {
  //   disableHysteresis?: boolean;
  //   target?: Node | Window;
  //   threshold?: number;
  // }

  /** 
   * 우선 첫번째로 scrollY 값을 구할 수 있어야되고
   * strokeDashoffset이 react에서도 사용할 수 있는지 확인해야됨
   * function calcDashoffset(scrollY, element, length) { scrollY는 구해야되고
   * element = ref.current
   * length = offsetHeight
  //   const ratio = (scrollY - element.offsetTop) / element.offsetHeight
  //   const value = length - (length * ratio)
  //   return value < 0 ? 0 : value > length ? length : value
  // }

  // function scrollHandler() {
  //   const scrollY = window.scrollY + (window.innerHeight * 0.8) innerHeight = vh
  //   path1.style.strokeDashoffset = calcDashoffset(scrollY, content1, path1Length)
  //   path2.style.strokeDashoffset = calcDashoffset(scrollY, content2, path2Length)
  //   path3.style.strokeDashoffset = calcDashoffset(scrollY, content3, path3Length)
  // }

  // window.addEventListener('scroll', scrollHandler) */

  // scroll에 따라 dash offset 의 값이 바뀌어야됨! 0 ~ img height까지@
  // calc dash offset은 스크롤 길이에 따라 바꿔주려고 하는거
  // innerHeignt = vh
  // scrollY 는 전체 화면에서 얼마나 스크롤이 내려왔는지
  // strokeDashoffset 은 어디서부터 그릴건지
  // strokeDasharray 는 홀수인자는 그리는양 짝수인자는 공백양
  // 인자 하나만 예를 들어 100을 주면 100만큼 그리고 100만큼 공백이라는거
  const { scrollYProgress } = useViewportScroll();
  const { scrollY } = useViewportScroll();

  const transition = { duration: 4, yoyo: Infinity, ease: "easeInOut" };

  const pathVariant = {
    visible: { opacity: 1 },
    hidden: { opacity: 0 },
  };
  return (
    <>
      <Container
        sx={{
          height: "2500px",
          bgcolor: "black",
          fontFamily: "Nanum Gothic",
          color: "#fff",
          textAlign: "center",
        }}
      >
        <Box>Hello Home!</Box>
        {/* 
        <Grow
          className="path1"
          ref={ref}
          mountOnEnter
          in={scrollTrigger}
          // timeout={1000}
          onScroll={handleScroll}
        >
          <img src={practiceSvg} stroke-dashoffset="50px" />
        </Grow> */}

        <svg
          version="1.1"
          id="svg2"
          xmlns="http://www.w3.org/2000/svg"
          x="0px"
          y="0px"
          viewBox="0 0 4019.1 3610.2"
        >
          <g transform="matrix(1.3333333,0,0,-1.3333333,0,3610.2267)" id="g10">
            <g transform="scale(0.1)" id="g12">
              <g transform="scale(1.67648)" id="g14">
                <motion.path
                  id="path16"
                  d="m 16237.7,5730.52 c -371.9,-81.48 -735.6,-197.97 -1086.1,-349.66 -167.1,-72.29 -339.9,-146.56 -493.4,-246.82 -133.9,-87.51 -225.8,-201.32 -284,-353.13 -61.5,-160.51 -97.8,-363.55 -257.4,-455.83 -155,-89.65 -278.2,33.28 -350.8,165.28 -67.4,122.46 -112.3,256.97 -197,368.99 -91.2,120.61 -213.7,213.96 -351.2,271.28 -277.8,115.72 -592.5,60.25 -824.4,-132.59 -53.4,-44.5 -101.1,-95.5 -142.4,-152.11 -49.5,-68 -74.5,-158.66 -129.3,-221.06 -71,-80.7 -185.6,-20.04 -242.2,47.84 -42.7,51.18 -67.1,116.2 -73.7,182.94 -27.4,275.16 202.2,537.68 476.8,484.35 321.5,-62.45 504.6,-425.65 403,-734.99 -113.4,-345.25 -496.8,-512.14 -817.3,-355.98 -279.3,136.11 -372.5,457.98 -348.2,754.38 27.9,339.81 199.5,626.9 390.2,896.28 104,146.79 213.2,289.77 311.1,441.04 90.7,140.06 199.6,304.57 223.1,474.69 17.7,127.29 -46.7,273.66 -183.6,291.14 -150.3,19.15 -217.6,-164.21 -260.2,-280.59 -121.9,-333.25 -92.4,-706.12 -18.8,-1047.01 143.9,-666.94 524.1,-1465.51 98.5,-2108.23 -197,-297.53 -550.6,-405.61 -878.8,-465.8 -288,-52.85 -585.2,-58.69 -875.4,-20.58 -562.58,73.91 -1118.27,321.87 -1502.35,759.99 -96.75,110.41 -179.72,231.73 -250.16,361.41 -13.55,24.99 -51.9,31.85 -71.05,9.43 -6.91,-8.06 -13.83,-16.17 -20.75,-24.22 25.77,-10.98 51.53,-21.95 77.3,-32.93 -69.37,1676.61 -139.58,3353.7 -151.33,5031.98 -5.84,833.19 2.74,1666.59 32.93,2499.19 15.33,421.3 36.15,842.4 63.41,1263.1 13.47,207.9 29.46,415.6 45.27,623.3 10.44,137.3 12.47,277.1 -14.74,412.6 -50.34,250.8 -256.13,460.4 -519.42,367.7 -309.16,-108.7 -399.53,-448.4 -373.34,-751.9 16.64,-192.2 59.77,-382.2 94.84,-571.4 36.75,-198.5 89.42,-401.2 100.39,-603 20.58,-378.9 37.58,-758 49.33,-1137.3 29.29,-943.7 50.94,-1908.43 -80.17,-2845.99 -17.3,-123.84 -38.05,-247.25 -64.66,-369.29 -24.39,-112.08 -58.69,-221.48 -80.11,-334.21 -57.26,-301.82 -76.4,-612.89 -70.74,-919.91 6.14,-331.76 60.67,-669.73 234.48,-955.45 61.98,-101.88 156.58,-180.26 204.54,-288.17 22.54,-50.52 85.35,-17.47 90.42,25.24 25.12,210.14 29.71,422.13 10.98,633.11 -8.89,100.09 -22.37,200 -40.98,298.72 -13.96,74.03 -30.48,152.76 -86.91,205.97 -110.47,104.2 -274.02,26.01 -363.91,-66.45 -89.18,-91.68 -146.74,-218.14 -172.87,-343.88 -51.83,-249.33 5.67,-529.74 175.31,-720.14 188.79,-211.81 486.2,-245.57 733.32,-127.47 261.21,124.79 426.37,401.62 394.76,698.67 -30.84,290.43 -225,560.4 -497.65,653.87 -147.63,50.64 -322.46,49.87 -458.34,-35.31 -135.76,-85.12 -210.8,-236.81 -255.24,-388.73 -83.87,-286.44 -84.76,-595.78 -21.23,-886.5 142.91,-654.29 617.12,-1231.81 1246.84,-1430.74 4.29,32.63 8.64,65.32 12.94,98 -605.14,-51.24 -1213.56,-37.04 -1815.77,42.35 15.57,-12.23 31.14,-24.39 46.76,-36.62 -68.41,235.97 4.06,442.35 200.66,577.22 167.2,114.65 366.66,197.32 555.75,266.39 411.04,150.2 849.82,165.71 1278.87,99.85 208.83,-32.09 415.93,-91.32 599.95,-200 161.65,-95.49 297.11,-230.01 408.77,-382.7 129.4,-177.1 206.6,-386.53 183.2,-610.27 -29.4,-283.63 -169.8,-543.64 -324.74,-774.6 -585.04,-872.13 -1630.33,-1455.61 -2667.2,-1146.09 -475.94,142.02 -873.44,479.87 -1115.02,922.94 -256.46,470.33 -312.31,1031.09 -179.54,1550.63 67.94,265.98 187.77,502.49 330.33,733.39 129.09,209.12 271.65,424.34 324.08,670.03 24.39,114.35 26.96,232.16 2.15,346.68 -29.89,138.03 -95.32,264.72 -124.61,403.11 -49.81,235.07 -17.6,490.79 90.54,704.27 216.95,428.4 772.87,624.17 1183.08,357.48 325.03,-211.28 464.25,-696.11 860.55,-798.82 245.64,-63.71 449.1,98.36 684.53,126.63 115.07,13.84 249.75,-9.36 306.06,-127.29 52.26,-109.51 18.43,-246.65 -29.82,-351.03 -99.68,-215.51 -291.15,-380.74 -305.82,-632.99 -10.44,-178.24 73.96,-343.94 167.73,-487.45 101.04,-154.73 224.52,-297.53 301.94,-467.29 95.62,-209.67 44.62,-404 -110.76,-567.68 -200.19,-210.8 -435.38,-392.97 -652.44,-584.98 -210.15,-185.86 -417.78,-376.98 -646.48,-538.75 -230.48,-163.02 -478.5,-283.86 -752.53,-345.48 -295.26,-66.33 -600.96,-80.29 -901.95,-97.89 -611.22,-35.73 -1223.52,-44.61 -1835.58,-50.82 -889.4,-9 -1778.15,35.38 -2667.5,1.91 -287.31,-10.79 -573.83,-29.94 -860.69,-48.79 -43.99,-2.87 -44.31,-73.67 0,-70.74 1026.17,67.34 2053.81,25.41 3080.76,16.58 588.09,-5.01 1177.64,5.72 1765.32,27.32 326.64,11.99 653.81,27.56 979.43,57.44 291.51,26.72 582.12,74.44 851.73,196.42 256.01,115.84 483.27,287.33 698.43,468.96 240.26,202.81 473.13,415.22 708.75,623.69 185.44,164.03 440.86,338.63 485.89,605.56 31.26,185.09 -46.64,358.19 -143.27,509.52 -106.24,166.35 -240.62,317.51 -320.97,500.21 -40.8,92.76 -62.93,195.47 -45.69,296.99 22.96,134.81 106.47,249.22 180.26,359.27 119.47,178.23 253.62,435.55 127.35,648.08 -127.95,215.22 -400.96,174.36 -597.27,104.33 -129.73,-46.29 -264,-106.24 -404.42,-83.57 -101.04,16.28 -189.92,71.1 -265.44,140.06 -161.88,147.69 -276.11,341.19 -426.48,500.15 -156.88,165.76 -351.75,267.7 -577.23,286.55 -232.45,19.45 -472.95,-51.29 -657.92,-197.67 -182.53,-144.41 -306.06,-359.74 -358.31,-589.03 -59.05,-259 -21.18,-502.79 66.92,-748.78 50.65,-141.31 83.09,-280.46 57.33,-431.38 -22.97,-134.56 -78.14,-260.24 -141.91,-379.13 -133.67,-249.03 -302.72,-474.86 -411.87,-737.79 -210.83,-507.73 -245.01,-1097 -63.25,-1619.47 166.56,-478.68 500.47,-897.29 938.12,-1138.51 475.52,-262.22 1047.73,-306.3 1566.37,-168.75 510.24,135.28 964.94,448.68 1317.05,847.37 177.99,201.43 339.11,427.32 457.81,671.11 115.7,237.58 195.8,513.69 137.9,779.49 -85.8,394.16 -429.77,733.08 -779.9,886.32 -195.12,85.42 -403.53,128.13 -613.73,150.14 -226.25,23.68 -455.9,33.4 -682.03,4.35 C 8034.7,5332.9 7816.2,5268.19 7605.52,5178 7416.2,5096.99 7208.08,5014.5 7059.8,4864.18 c -155.15,-157.35 -185.87,-381.39 -125.03,-591.29 6.74,-23.39 24.82,-33.71 46.77,-36.63 602.21,-79.45 1210.63,-93.65 1815.77,-42.41 53.27,4.48 67.34,80.77 12.88,98 -472.83,149.36 -849.28,525.39 -1054.89,982.78 -104.08,231.61 -163.02,486.49 -165.64,741.85 -2.57,245.57 32.69,583.07 220.28,757.96 225.77,210.44 578.95,56.31 735.65,-165.11 147.63,-208.59 182.88,-498.49 38.12,-718.53 -138.93,-211.16 -416.77,-330.69 -657.51,-252.61 -211.16,68.53 -339.29,279.51 -372.51,495.68 -18.85,122.4 -8.23,250.58 32.87,367.2 41.69,118.34 139.75,282.2 277.06,290.78 100.28,6.27 118.29,-103.67 133.08,-182.04 18.79,-99.44 31.98,-199.95 39.97,-300.93 15.92,-201.55 10.49,-403.76 -13.42,-604.36 30.18,8.35 60.3,16.76 90.42,25.17 -48.79,109.69 -141.9,185.15 -204.59,288.16 -84.76,139.34 -140.42,294.61 -175.25,454.53 -72.59,333.25 -56.67,693.41 -22.85,1031.03 28.4,283.03 110.95,549.06 159.27,827.62 137.55,793.09 136.71,1614.4 125.8,2416.97 -4.36,323.5 -13.72,646.9 -26.43,970.1 -14.67,373.2 -15.09,752.2 -83.15,1119.5 -36.03,194.3 -72.06,388.5 -107.78,582.9 -33.89,184.4 -69.67,377.4 -33.89,564.5 30.19,157.9 123.12,300.6 269.26,367.1 134.45,61.1 284.47,18 363.86,-109.8 70.09,-112.9 83.27,-256.6 84.28,-387.2 1.37,-171.3 -20.34,-343.2 -32.57,-513.9 -28.75,-400.2 -51.47,-800.9 -68.89,-1201.8 -35.13,-807 -48.97,-1614.8 -48.14,-2422.49 1.67,-1617.31 61.98,-3233.8 130.1,-4849.33 8.58,-203.22 17.24,-406.38 25.89,-609.55 1.61,-37.58 49.98,-64.9 77.3,-32.92 6.92,8.11 13.84,16.16 20.76,24.27 -23.74,3.1 -47.42,6.27 -71.1,9.43 296.15,-543.76 818.5,-907.14 1394.47,-1074.99 295.48,-86.14 605.58,-123.24 912.48,-112.14 311.7,11.21 637.7,65.37 924.5,195.41 313.5,142.26 516.3,417.42 592.8,757.95 82.2,366.25 19,737.98 -74.6,1094.98 -103.6,395.41 -241.9,788.02 -240.9,1202.7 0.4,201.49 34.3,406.44 124.9,586.82 19.2,38.12 43.7,93 87.2,107.73 52.2,17.71 107.5,-27.5 130.3,-72.3 50.7,-99.85 -13.2,-226.48 -57.5,-316.13 -302.8,-611.94 -944.2,-1106.01 -846.3,-1864.81 38.1,-295.62 218.4,-556.1 507.6,-634.01 312.4,-84.16 640.8,68.24 779.4,369.83 132.6,288.52 53.6,622.49 -197.5,812.24 -222.1,167.85 -528.5,153.47 -697.8,-82.08 -135.6,-188.91 -161.1,-492.04 30.4,-653.27 121.4,-102.18 275,-89.06 353.1,55.29 85.4,157.83 173,288.28 329.6,380.26 317.8,186.82 724.6,102.78 954.8,-189.14 149.1,-189.03 210.6,-613.49 513.7,-604.72 147.1,4.29 260.9,129.49 322.5,256.49 80.6,166.36 100.7,359.98 233.5,496.57 137.3,141.31 339.5,221.6 514.1,301.17 190.5,86.79 385.6,162.9 583.9,228.45 192.6,63.65 388.2,116.68 586,160.34 43.8,9.66 25.2,78.68 -18.5,69.07 v 0"
                  // fill="#fff"
                  variants={pathVariant}
                  strokeWidth="25"
                  stroke="rgba(255, 255, 255, 1)"
                  strokeLinecap="round"
                  pathLength={scrollY}
                  // // strokeDasharray="100"
                  initial={{
                    pathLength: 0,
                    strokeDashoffset: 100,
                  }}
                  animate={{ pathLength: 1, strokeDasharray: 100 }}
                />
              </g>
            </g>
          </g>
        </svg>

        <svg
          viewBox="0 0 7487 2503"
          // viewBox="0 0 694 448" fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <motion.path
            d="m2099 887c337-53 685-46 1041 6 113 174 175 397 175 629 0 524-312 949-698 949-385 0-698-425-698-949 0-235 64-461 179-635z"
            fill="transparent"
            strokeWidth="5"
            stroke="rgba(255, 255, 255, 1)"
            strokeLinecap="round"
            initial={{ pathLength: 0 }}
            animate={{ pathLength: 1 }}
            pathLength={scrollYProgress}
          />
          <motion.path
            d="m25 1442c961-2660 4467-823 6197-459 46 0 1239 367 1239 138"
            fill="transparent"
            strokeWidth="5"
            stroke="rgba(255, 255, 255, 1)"
            strokeLinecap="round"
            initial={{ pathLength: 0 }}
            animate={{ pathLength: 1 }}
            pathLength={scrollYProgress}
          />
          <motion.path
            d="m5533 1534c-1102-1102-4177-1193-5141 230 275 0 780 138 964 321 621 621 3977 548 4177-551z"
            fill="transparent"
            strokeWidth="5"
            stroke="rgba(255, 255, 255, 1)"
            strokeLinecap="round"
            initial={{ pathLength: 0 }}
            animate={{ pathLength: 1 }}
            pathLength={scrollYProgress}
          />
          <motion.path
            d="m409 1768c1061-1028 2253-1297 5075-233"
            fill="transparent"
            strokeWidth="5"
            stroke="rgba(255, 255, 255, 1)"
            strokeLinecap="round"
            initial={{ pathLength: 0 }}
            animate={{ pathLength: 1 }}
            pathLength={scrollYProgress}
          />
          <motion.path
            d="m1110 1231c-63 193-67 581 17 706"
            fill="transparent"
            strokeWidth="5"
            stroke="rgba(255, 255, 255, 1)"
            strokeLinecap="round"
            initial={{ pathLength: 0 }}
            animate={{ pathLength: 1 }}
            pathLength={scrollYProgress}
          />
        </svg>

        {/* <Box component='svg' 
            sx={{
              fill: (theme: Theme) => theme.palette.common.white,
              stroke: (theme) => theme.palette.divider,
              strokeWidth: 1,
            }}
            points='0,100 50,00, 100,100'
          />
        </Box> */}
      </Container>
    </>
  );
}
